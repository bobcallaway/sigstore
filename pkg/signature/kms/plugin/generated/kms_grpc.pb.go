//
// Copyright 2024 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: kms.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KMSPlugin_CreateKey_FullMethodName           = "/dev.sigstore.kms.v1.KMSPlugin/CreateKey"
	KMSPlugin_PublicKey_FullMethodName           = "/dev.sigstore.kms.v1.KMSPlugin/PublicKey"
	KMSPlugin_SignMessage_FullMethodName         = "/dev.sigstore.kms.v1.KMSPlugin/SignMessage"
	KMSPlugin_VerifySignature_FullMethodName     = "/dev.sigstore.kms.v1.KMSPlugin/VerifySignature"
	KMSPlugin_SupportedAlgorithms_FullMethodName = "/dev.sigstore.kms.v1.KMSPlugin/SupportedAlgorithms"
	KMSPlugin_DefaultAlgorithm_FullMethodName    = "/dev.sigstore.kms.v1.KMSPlugin/DefaultAlgorithm"
)

// KMSPluginClient is the client API for KMSPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KMSPluginClient interface {
	CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*CreateKeyResponse, error)
	PublicKey(ctx context.Context, in *PublicKeyRequest, opts ...grpc.CallOption) (*PublicKeyResponse, error)
	SignMessage(ctx context.Context, in *SignMessageRequest, opts ...grpc.CallOption) (*SignMessageResponse, error)
	VerifySignature(ctx context.Context, in *VerifySignatureRequest, opts ...grpc.CallOption) (*Empty, error)
	SupportedAlgorithms(ctx context.Context, in *SupportedAlgorithmsRequest, opts ...grpc.CallOption) (*SupportedAlgorithmsResponse, error)
	DefaultAlgorithm(ctx context.Context, in *DefaultAlgorithmRequest, opts ...grpc.CallOption) (*DefaultAlgorithmResponse, error)
}

type kMSPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewKMSPluginClient(cc grpc.ClientConnInterface) KMSPluginClient {
	return &kMSPluginClient{cc}
}

func (c *kMSPluginClient) CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*CreateKeyResponse, error) {
	out := new(CreateKeyResponse)
	err := c.cc.Invoke(ctx, KMSPlugin_CreateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kMSPluginClient) PublicKey(ctx context.Context, in *PublicKeyRequest, opts ...grpc.CallOption) (*PublicKeyResponse, error) {
	out := new(PublicKeyResponse)
	err := c.cc.Invoke(ctx, KMSPlugin_PublicKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kMSPluginClient) SignMessage(ctx context.Context, in *SignMessageRequest, opts ...grpc.CallOption) (*SignMessageResponse, error) {
	out := new(SignMessageResponse)
	err := c.cc.Invoke(ctx, KMSPlugin_SignMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kMSPluginClient) VerifySignature(ctx context.Context, in *VerifySignatureRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, KMSPlugin_VerifySignature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kMSPluginClient) SupportedAlgorithms(ctx context.Context, in *SupportedAlgorithmsRequest, opts ...grpc.CallOption) (*SupportedAlgorithmsResponse, error) {
	out := new(SupportedAlgorithmsResponse)
	err := c.cc.Invoke(ctx, KMSPlugin_SupportedAlgorithms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kMSPluginClient) DefaultAlgorithm(ctx context.Context, in *DefaultAlgorithmRequest, opts ...grpc.CallOption) (*DefaultAlgorithmResponse, error) {
	out := new(DefaultAlgorithmResponse)
	err := c.cc.Invoke(ctx, KMSPlugin_DefaultAlgorithm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KMSPluginServer is the server API for KMSPlugin service.
// All implementations must embed UnimplementedKMSPluginServer
// for forward compatibility
type KMSPluginServer interface {
	CreateKey(context.Context, *CreateKeyRequest) (*CreateKeyResponse, error)
	PublicKey(context.Context, *PublicKeyRequest) (*PublicKeyResponse, error)
	SignMessage(context.Context, *SignMessageRequest) (*SignMessageResponse, error)
	VerifySignature(context.Context, *VerifySignatureRequest) (*Empty, error)
	SupportedAlgorithms(context.Context, *SupportedAlgorithmsRequest) (*SupportedAlgorithmsResponse, error)
	DefaultAlgorithm(context.Context, *DefaultAlgorithmRequest) (*DefaultAlgorithmResponse, error)
	mustEmbedUnimplementedKMSPluginServer()
}

// UnimplementedKMSPluginServer must be embedded to have forward compatible implementations.
type UnimplementedKMSPluginServer struct {
}

func (UnimplementedKMSPluginServer) CreateKey(context.Context, *CreateKeyRequest) (*CreateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKey not implemented")
}
func (UnimplementedKMSPluginServer) PublicKey(context.Context, *PublicKeyRequest) (*PublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicKey not implemented")
}
func (UnimplementedKMSPluginServer) SignMessage(context.Context, *SignMessageRequest) (*SignMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignMessage not implemented")
}
func (UnimplementedKMSPluginServer) VerifySignature(context.Context, *VerifySignatureRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySignature not implemented")
}
func (UnimplementedKMSPluginServer) SupportedAlgorithms(context.Context, *SupportedAlgorithmsRequest) (*SupportedAlgorithmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupportedAlgorithms not implemented")
}
func (UnimplementedKMSPluginServer) DefaultAlgorithm(context.Context, *DefaultAlgorithmRequest) (*DefaultAlgorithmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefaultAlgorithm not implemented")
}
func (UnimplementedKMSPluginServer) mustEmbedUnimplementedKMSPluginServer() {}

// UnsafeKMSPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KMSPluginServer will
// result in compilation errors.
type UnsafeKMSPluginServer interface {
	mustEmbedUnimplementedKMSPluginServer()
}

func RegisterKMSPluginServer(s grpc.ServiceRegistrar, srv KMSPluginServer) {
	s.RegisterService(&KMSPlugin_ServiceDesc, srv)
}

func _KMSPlugin_CreateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KMSPluginServer).CreateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KMSPlugin_CreateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KMSPluginServer).CreateKey(ctx, req.(*CreateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KMSPlugin_PublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KMSPluginServer).PublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KMSPlugin_PublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KMSPluginServer).PublicKey(ctx, req.(*PublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KMSPlugin_SignMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KMSPluginServer).SignMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KMSPlugin_SignMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KMSPluginServer).SignMessage(ctx, req.(*SignMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KMSPlugin_VerifySignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KMSPluginServer).VerifySignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KMSPlugin_VerifySignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KMSPluginServer).VerifySignature(ctx, req.(*VerifySignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KMSPlugin_SupportedAlgorithms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportedAlgorithmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KMSPluginServer).SupportedAlgorithms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KMSPlugin_SupportedAlgorithms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KMSPluginServer).SupportedAlgorithms(ctx, req.(*SupportedAlgorithmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KMSPlugin_DefaultAlgorithm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultAlgorithmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KMSPluginServer).DefaultAlgorithm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KMSPlugin_DefaultAlgorithm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KMSPluginServer).DefaultAlgorithm(ctx, req.(*DefaultAlgorithmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KMSPlugin_ServiceDesc is the grpc.ServiceDesc for KMSPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KMSPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dev.sigstore.kms.v1.KMSPlugin",
	HandlerType: (*KMSPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKey",
			Handler:    _KMSPlugin_CreateKey_Handler,
		},
		{
			MethodName: "PublicKey",
			Handler:    _KMSPlugin_PublicKey_Handler,
		},
		{
			MethodName: "SignMessage",
			Handler:    _KMSPlugin_SignMessage_Handler,
		},
		{
			MethodName: "VerifySignature",
			Handler:    _KMSPlugin_VerifySignature_Handler,
		},
		{
			MethodName: "SupportedAlgorithms",
			Handler:    _KMSPlugin_SupportedAlgorithms_Handler,
		},
		{
			MethodName: "DefaultAlgorithm",
			Handler:    _KMSPlugin_DefaultAlgorithm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kms.proto",
}
